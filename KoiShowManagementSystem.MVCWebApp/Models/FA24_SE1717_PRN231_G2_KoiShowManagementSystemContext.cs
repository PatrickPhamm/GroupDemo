// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace KoiShowManagementSystem.MVCWebApp.Models;

public partial class FA24_SE1717_PRN231_G2_KoiShowManagementSystemContext : DbContext
{
    public FA24_SE1717_PRN231_G2_KoiShowManagementSystemContext(DbContextOptions<FA24_SE1717_PRN231_G2_KoiShowManagementSystemContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Application> Applications { get; set; }

    public virtual DbSet<Contest> Contests { get; set; }

    public virtual DbSet<Judge> Judges { get; set; }

    public virtual DbSet<JudgesCriterion> JudgesCriteria { get; set; }

    public virtual DbSet<Koi> Kois { get; set; }

    public virtual DbSet<Result> Results { get; set; }

    public virtual DbSet<User> Users { get; set; }


    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);
        return connectionString;
    }
    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection"));

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Application>(entity =>
        {
            entity.ToTable("Application");

            entity.Property(e => e.ApplicationId).HasColumnName("application_id");
            entity.Property(e => e.ConstestId).HasColumnName("constest_id");
            entity.Property(e => e.ContestSection)
                .HasMaxLength(50)
                .HasColumnName("contest_section");
            entity.Property(e => e.KoiId).HasColumnName("koi_id");
            entity.Property(e => e.Note)
                .HasColumnType("text")
                .HasColumnName("note");
            entity.Property(e => e.PaymentStatus)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.RankAssigned)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("rank_assigned");
            entity.Property(e => e.ReviewDate).HasColumnName("review_date");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("status");
            entity.Property(e => e.SubmissionDate).HasColumnName("submission_date");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.User).WithMany(p => p.Applications)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_Application_User");
        });

        modelBuilder.Entity<Contest>(entity =>
        {
            entity.ToTable("Contest");

            entity.Property(e => e.ContestId).HasColumnName("contest_id");
            entity.Property(e => e.ContestType)
                .HasMaxLength(255)
                .HasColumnName("contest_type");
            entity.Property(e => e.Description)
                .HasColumnType("text")
                .HasColumnName("description");
            entity.Property(e => e.EndDate).HasColumnName("end_date");
            entity.Property(e => e.KoiId).HasColumnName("koi_id");
            entity.Property(e => e.Location)
                .HasMaxLength(255)
                .HasColumnName("location");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.PrizePool)
                .HasMaxLength(255)
                .HasColumnName("prize_pool");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("status");

            entity.HasOne(d => d.Koi).WithMany(p => p.Contests)
                .HasForeignKey(d => d.KoiId)
                .HasConstraintName("FK_Contest_Koi");
        });

        modelBuilder.Entity<Judge>(entity =>
        {
            entity.HasKey(e => e.JudgesId);

            entity.Property(e => e.JudgesId).HasColumnName("judges_id");
            entity.Property(e => e.AffiliatedClub)
                .HasMaxLength(100)
                .HasColumnName("affiliated_club");
            entity.Property(e => e.AssignedCategory)
                .HasMaxLength(100)
                .HasColumnName("assigned_category");
            entity.Property(e => e.Availability).HasColumnName("availability");
            entity.Property(e => e.CriteriaId).HasColumnName("criteria_id");
            entity.Property(e => e.Email)
                .HasMaxLength(255)
                .HasColumnName("email");
            entity.Property(e => e.ExpertiseLevel)
                .HasMaxLength(50)
                .HasColumnName("expertise_level");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.Phone)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("phone");
            entity.Property(e => e.YearsOfExperience).HasColumnName("years_of_experience");

            entity.HasOne(d => d.Criteria).WithMany(p => p.Judges)
                .HasForeignKey(d => d.CriteriaId)
                .HasConstraintName("FK_Judges_Judges_criteria");
        });

        modelBuilder.Entity<JudgesCriterion>(entity =>
        {
            entity.HasKey(e => e.CriteriaId);

            entity.ToTable("Judges_criteria");

            entity.Property(e => e.CriteriaId).HasColumnName("criteria_id");
            entity.Property(e => e.Age).HasColumnName("age");
            entity.Property(e => e.Color)
                .HasMaxLength(50)
                .HasColumnName("color");
            entity.Property(e => e.ContestId).HasColumnName("contest_id");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.Expertise)
                .HasMaxLength(255)
                .HasColumnName("expertise");
            entity.Property(e => e.Point).HasColumnName("point");
            entity.Property(e => e.Size).HasColumnName("size");
            entity.Property(e => e.Species)
                .HasMaxLength(255)
                .HasColumnName("species");
            entity.Property(e => e.Weight).HasColumnName("weight");

            entity.HasOne(d => d.Contest).WithMany(p => p.JudgesCriteria)
                .HasForeignKey(d => d.ContestId)
                .HasConstraintName("FK_Judges_criteria_Contest");
        });

        modelBuilder.Entity<Koi>(entity =>
        {
            entity.ToTable("Koi");

            entity.Property(e => e.KoiId).HasColumnName("koi_id");
            entity.Property(e => e.Age).HasColumnName("age");
            entity.Property(e => e.ApplicationId).HasColumnName("application_id");
            entity.Property(e => e.Breed)
                .HasMaxLength(255)
                .HasColumnName("breed");
            entity.Property(e => e.ColorPatern)
                .HasMaxLength(100)
                .HasColumnName("color_patern");
            entity.Property(e => e.Dayofbirth).HasColumnName("dayofbirth");
            entity.Property(e => e.HealthStatus)
                .HasMaxLength(50)
                .HasColumnName("health_status");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.Size).HasColumnName("size");
            entity.Property(e => e.Species)
                .HasMaxLength(255)
                .HasColumnName("species");

            entity.HasOne(d => d.Application).WithMany(p => p.Kois)
                .HasForeignKey(d => d.ApplicationId)
                .HasConstraintName("FK_Koi_Application");
        });

        modelBuilder.Entity<Result>(entity =>
        {
            entity.ToTable("Result");

            entity.Property(e => e.ResultId).HasColumnName("result_id");
            entity.Property(e => e.Comment)
                .HasColumnType("text")
                .HasColumnName("comment");
            entity.Property(e => e.Disqualification)
                .HasMaxLength(50)
                .HasColumnName("disqualification");
            entity.Property(e => e.EvaluationDate).HasColumnName("evaluation_date");
            entity.Property(e => e.JudgesId).HasColumnName("judges_id");
            entity.Property(e => e.Medal)
                .HasMaxLength(50)
                .HasColumnName("medal");
            entity.Property(e => e.Own)
                .HasMaxLength(50)
                .HasColumnName("own");
            entity.Property(e => e.Prize)
                .HasMaxLength(255)
                .HasColumnName("prize");
            entity.Property(e => e.Rank).HasColumnName("rank");
            entity.Property(e => e.Score)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("score");

            entity.HasOne(d => d.Judges).WithMany(p => p.Results)
                .HasForeignKey(d => d.JudgesId)
                .HasConstraintName("FK_Result_Judges");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.ToTable("User");

            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.Address)
                .HasMaxLength(255)
                .HasColumnName("address");
            entity.Property(e => e.Dayofbirth).HasColumnName("dayofbirth");
            entity.Property(e => e.Email)
                .HasMaxLength(255)
                .HasColumnName("email");
            entity.Property(e => e.Name)
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.Password)
                .HasMaxLength(255)
                .HasColumnName("password");
            entity.Property(e => e.Phone)
                .HasMaxLength(50)
                .HasColumnName("phone");
            entity.Property(e => e.Role)
                .HasMaxLength(50)
                .HasColumnName("role");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}